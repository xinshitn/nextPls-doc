name: Ruby

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up Ruby 2.6
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.6.x
    - name: Build and test with Rake
      run: |
        gem install bundler
        bundle install --jobs 4 --retry 3
        bundle exec middleman build --clean
        ls
        parse_args "$@"

        enable_expanded_output

        if ! git diff --exit-code --quiet --cached; then
          echo Aborting due to uncommitted changes in the index >&2
          return 1
        fi

        commit_title=`git log -n 1 --format="%s" HEAD`
        commit_hash=` git log -n 1 --format="%H" HEAD`

        #default commit message uses last title if a custom one is not supplied
        if [[ -z $commit_message ]]; then
          commit_message="publish: $commit_title"
        fi

        #append hash to commit message unless no hash flag was found
        if [ $append_hash = true ]; then
          commit_message="$commit_message"$'\n\n'"generated from commit $commit_hash"
        fi

        previous_branch=`git rev-parse --abbrev-ref HEAD`

        if [ ! -d "$deploy_directory" ]; then
          echo "Deploy directory '$deploy_directory' does not exist. Aborting." >&2
          return 1
        fi

        # must use short form of flag in ls for compatibility with macOS and BSD
        if [[ -z `ls -A "$deploy_directory" 2> /dev/null` && -z $allow_empty ]]; then
          echo "Deploy directory '$deploy_directory' is empty. Aborting. If you're sure you want to deploy an empty tree, use the --allow-empty / -e flag." >&2
          return 1
        fi

        if git ls-remote --exit-code $repo "refs/heads/$deploy_branch" ; then
          # deploy_branch exists in $repo; make sure we have the latest version

          disable_expanded_output
          git fetch --force $repo $deploy_branch:$deploy_branch
          enable_expanded_output
        fi

        # check if deploy_branch exists locally
        if git show-ref --verify --quiet "refs/heads/$deploy_branch"
        then incremental_deploy
        else initial_deploy
        fi

        restore_head
